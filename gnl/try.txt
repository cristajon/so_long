Tu programa debe compilar con el flag -DBUFFER_SIZE=xx. Este flag se utilizará
para determinar el tamaño del buffer de las lecturas de tu get_next_line(). Este
parámetro será modificado por tus evaluadores y por Moulinette para probar tu
programa.
Debemos ser capaces de compilar este proyecto con y sin el flag -D
BUFFER_SIZE, junto a los flags habituales. Puedes elegir el valor por
defecto que prefieras.
• El programa se compilará de la siguiente forma (se utiliza como ejemplo un tamaño
de buffer de 42):
cc -Wall -Werror -Wextra -D BUFFER_SIZE=42 <archivos>.c.
• Se considera que get_next_line() tiene un comportamiento indeterminado si el
archivo al que apunta el fd ha cambiado desde la última vez que se llamó, siempre
que read() no haya llegado al final del archivo.
• Se considera que get_next_line() tiene un comportamiento indeterminado cuando lo que se lee es un archivo binario. Sin embargo, puedes inmplementar alguna
manera lógica de sortear este problema, si quieres.
¿Funciona correctamente tu get_next_line si el BUFFER_SIZE es 9999?
¿Y si es 1? ¿Qué tal con 10000000? ¿Sabes por qué?
Intenta leer lo menos posible cada vez que se llame a
get_next_line(). Si encuentras un salto de línea, deberás devolver la
línea actual. No leas el archivo entero y luego proceses cada línea


HOLI\n

HOLI\n87-7+654+78787

HOLI
